[
    "好，各位同学，大家好啊",
    "这一小节呢，我们来讲解一个问题",
    "如何使用不存在的数据表",
    "有同学有疑问了",
    "这个数据表它不存在",
    "它是个什么东西呢",
    "怎么使用呢",
    "估计啊，使用过的同学应该已经猜出来了，对吧",
    "这个不存在的数据表就叫做视图 view ",
    "那视图这个东西呢",
    "它可以创建不存在的虚拟表",
    "也就是说这个表它就没有",
    "那没有这个表它怎么创建一个新的表呢",
    "它里面的数据是哪来的呢",
    "它是依赖于一个预设的 select 语句",
    "也就是说，试图这种虚拟的表",
    "它是 select 的别的表的数据",
    "也就是说你查询一个视图的时候",
    "它是使用你这个视图里面预设的 select 语句",
    "去去查询了别的数据",
    "组织的别的数据",
    "然后帮你呈现一个好像是不存在的全新的表格",
    "也就是说我们这个 select 语句的查询结果",
    "它就是虚拟表的数据",
    "我相信视图这个东西它具体怎么用",
    "网上已经有很多很多的资料了",
    "但是视图里面有一个关键的点",
    "是非常影响性能",
    "那就是视图算法的选择",
    "视图的算法就是试图创建语句",
    "里面会设置一个 algorithm 啊",
    "就是算法",
    "这个算法呢有三种",
    "第一种叫 merge ",
    "merge 是将视图的 SQL 合并到主查询的 SQL 当中",
    "还有一种呢，叫 TEMPLABLE ",
    "就是将视图啊当做一个临时表",
    "也就是说试图的 select 语句先执行",
    "然后再从执行的中间结果再执行你所发出的 select 的语句",
    "但跟末日不一样",
    "上面那个 merge 呢",
    "是将你的 select 语句",
    "和视图本身的 select 语句合成一个",
    "这才叫 merge ，对吧",
    "那么一般来讲呢",
    "merge 的性能是优于 template bb ",
    "因为末指是没有中间结果的",
    "它是一步出结果",
    "那第三种 algorithm 就是算法的选择",
    "就是自动的 undefined 的",
    "让这个 MYSQL 自己去选择",
    "那我们来实际的看一下视图的使用",
    "还有视图的算法有什么区别啊",
    "这里呢，老师用 navigate 打开了一个数据表",
    "其实它跟我们的命令行的客户端是一样的，对吧",
    "它只是界面不一样",
    "这里有一个 payment payment 数据表",
    "这个数据表大家看有什么呀",
    "有 id 对吧",
    "有消费者 id ",
    "有员工 id ",
    "有这个 amount ",
    "这个时候我有一个需求",
    "我要建一个视图来显示出来",
    "所有的大额消费",
    "这个大额消费是多少呢",
    "大于两块钱",
    "大于两块钱就叫大额消费",
    "那这个视图怎么建呢",
    "啊，在这",
    "大家看，大家看这个创建语句啊",
    "用过视图的同学可能比较熟悉啊",
    "视图就是 create view ",
    "关键词就是 create view ",
    "试图的名字叫 bi 个 pay ",
    "老师给起的名比个 pas as ",
    "后面是 select 语句",
    "这个语句什么",
    "select 星 from payment where amount 啊",
    "大于二跟咱们刚才的需求是一样的，对吧",
    "把所有的 amount 大于二的语句给查询出来",
    "然后最重要的 all algorithm 这里写的是 merge ",
    "也就是说，创建了这个视图之后",
    "我们每一次查询这个视图",
    "它都会将我们的查询语句",
    "和下面这个查询语句",
    "默值在一块来运行",
    "最后得到我们的查询语句",
    "我们就以这个查询语句为例子啊",
    "什么例子呢",
    "select 星 from big pay ，好看",
    "select 星 from 这个视图对吧",
    "where stop id 等于一",
    "如果他是末置算法",
    "它会怎么办呢",
    "我们将我们视图的这个算法",
    "SQL 语句粘贴过来啊",
    "它会将这两个",
    "将视图本身的这个 SQL 语句",
    "和我们向视图发出的 SQL 语句联合起来",
    "也就是说它实际执行的是 selecting from payment",
    "这个实际的表",
    "物理的表",
    "where amount 大于二",
    "而且啊， and staff 等于一",
    "明白吗",
    "V 2 mt 大于二",
    "and staff 等于一",
    "或者是 staff 等于一",
    "在前面就是说我们对视图的查询语句",
    "在默认算法下",
    "会和视图本身的查询语句墨值在一起",
    "结合在一起进行查询",
    "最后执行的是这一个 SQL 语句",
    "然后返回结果",
    "如果是 template able 呢",
    "它会先执行我们视图的查询语句",
    "得到一个中间表",
    "执行这个查询语句",
    "得到一个中间表",
    "再对这个中间表执行我们的对视图的查询语句的",
    "这是两步",
    "这个地方是试图创建的时候",
    "一个比较重要的点",
    "也是容易被忽略的点",
    "是非常影响性能的",
    "那有同学说了",
    "我永远用墨子",
    "永远把这个算法设置成墨子",
    "这样的话是不是就万事大吉呢",
    "不是啊",
    "有很多的关键字",
    "有很多的运算是没有办法用墨子的",
    "它会自动的给你走 TEMPLABLE ",
    "也就是走中间结果",
    "像聚集函数 distinct 的语句",
    "group by having uni 和子查询这几种情况",
    "它是无法 merge 的",
    "会走 template ， able ，也是走中间结果",
    "大家看这些关键字呀或者功能啊",
    "它都有什么特点呢",
    "可能比较复杂",
    "要么它是动态动态的",
    "这种结果是很难走",
    "试图的、漠视的",
    "这里总结一下本小节的内容",
    "我们可以在不改变原有数据的情况下",
    "创建一个虚拟表",
    "其实是非常的方便的对吧",
    "但是我们使用视图尽量要使用 merge 算法",
    "而且避免那些无法使用末日的",
    "最后的关键字和功能",
    "这一小节的内容就到这里，谢谢大家",
    "4-10"
]