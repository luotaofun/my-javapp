[
    "这一小节呢，我们来向大家介绍",
    "各位同学，大家好啊",
    "那 mysql inno dB",
    "这个索引组织表",
    "是用的什么索引算法",
    "从题目当中大家应该也可以看到，是吧",
    "他就用了 B 加数",
    "那为什么会选用 B 加数以及 B 加数的",
    "这个 B 的含义是什么呢",
    "我们就一步一步的啊，往下来探究",
    "首先，这个 in dodd 是个索引组织表",
    "那索引组织表就需要一个索引的算法",
    "把这些数据给组织起来",
    "也就是说我们需要一个数据结构",
    "便于我们搜索",
    "是条索引里面的数值",
    "比如说我用一个线性的链表",
    "要想找到这个链表当中的一个值的话",
    "比如说 K 是五的话",
    "那么我就需要什么",
    "一个一个从第一个开始往后遍历",
    "那么这个链表就是我们所说的这种索引查找算法",
    "那这个索引查找算法",
    "它的这个性能的好坏",
    "对于我们 INODB 的性能",
    "而是有着极大极大的影响",
    "那么我们先看一下主流的这个索引查找算法",
    "都有哪些呢",
    "那第一个就是刚才我们讲的线性查找",
    "它是一个链表或者是一个 err ",
    "这样如果要搜索的话",
    "那就得从第一个、第二个、第三个、第四个这样一个、一个往后找",
    "那从线性查找后面呢",
    "进化出来这个二分查找",
    "其实这个二分查找啊",
    "可以认为是线性查找的一个升级",
    "也就是说二分查找是可以用线性查找",
    "一样的数据结构",
    "但是它的这个算法是不一样的啊",
    "那二分查找之后呢",
    "为了进一步的提升这个性能",
    "就引入了大家都非常熟悉的二叉树",
    "不管在上学的时候还是在平时的工作呀",
    "考试呀",
    "都非常容易遇到这个二叉树",
    "二叉树这种形式呢",
    "也是极大的提高了这种查找的效率",
    "后面二叉树因为有这种平衡的问题",
    "所以我没有引入了叫 balanced banner tree ",
    "或者叫平衡二叉树 ABLT ",
    "在平衡二叉树之后呢",
    "发现一个什么问题呢",
    "就是前面的这些数据结构",
    "它每一个节点",
    "每一个节点都是一个行",
    "就一个数据",
    "每一个节点是一个数据",
    "这样的话对于磁盘的利用率是有问题的",
    "也就是说我的数据最后要落在磁盘上",
    "那我以一个节点为这个单位去读取磁盘",
    "这个效率是很低的",
    "所以后面又引入了避税",
    "避税后面因为避税也有这个平衡的问题",
    "所以又引入了 B 加税",
    "使得它的效率更高啊",
    "你可以认为 B 加税是 B 数和线性查找的一个结合",
    "B 数和线性查找的一个结合",
    "那么这六个呢，就是主流的索引查找的算法",
    "我们一个一个仔细看",
    "仔细介绍一下",
    "第一个，线性查找",
    "线性查找",
    "大家想想线性查找是怎么查一个链表，对吧",
    "比如说从 D 到100",
    "从第一个开始",
    "我想找 id 是五的",
    "要一个一个一个一个找啊",
    "我们进一个网站",
    "看一下这个线性查找的原理是怎么样",
    "那这个网站呢，是美国的一个学校啊",
    "u s f c ",
    "他做的非常经典的一个数据可视化的网页",
    "大家搜索 USFCA ",
    "然后加上数据可视化或者加上算法",
    "就可以搜索到这个网页",
    "老师呢，尽量把这个网页嘛",
    "贴在这个问答区里面去",
    "这个 data structure visualization 就是数据结构的这个可视化",
    "这有一个什么 indexing ",
    "我们往下找",
    "这一段 indexing 就是查找",
    "查找算法或者是索引算法，对吧",
    "第一个就是我们要找的啊",
    "linear search 啊",
    "线性查找",
    "我们把它点开",
    "进入了一个界面啊",
    "看一下这个地方啊",
    "大家看这个地方是他给我们预设了一个表",
    "我们可以认为这个框里边的值是主键",
    "这个表示什么呢",
    "那比如说第一个框它是一条数据啊",
    "这个数据的主键是28",
    "就 id 是28",
    "那第二个数据的 id 是52",
    "第三个数据的 id 是103",
    "也就是说这个框它不仅代表这个数本身",
    "这个框是代表一行数据",
    "它显示出来的只是他的 id 啊",
    "比如说啊，我们要用线性查找",
    "要找这个223啊",
    "223这个数字怎么办呢",
    "id 是223的这一行怎么办呢",
    "在这输入223",
    "用 linear search 啊",
    "大家看线性查找在干嘛呀",
    "线性查找",
    "它从第零个开始找，对吧",
    "看他的 id 是28不对",
    "然后往后找",
    "然后第二个发现是52不对",
    "103不对",
    "再往后找",
    "147不对",
    "最后最后找找找，发现什么",
    "这行啊",
    "这行的 id 是223",
    "他帮我们把这行取出来了，对吧",
    "好，那你说线性查找的时间复杂度是什么",
    "这就是线性查找",
    "它的查找的延迟和时间是跟什么有关系的",
    "就是时间",
    "它是直接跟 N 相关",
    "就是直接跟表的数据的量的大小有关",
    "这个数据量越大",
    "我们查找一个一条数据",
    "它所用的时间就越多",
    "基本上是线性相关的",
    "那线性查找的原理啊",
    "就是刚才讲的",
    "从第一个数据开始逐个的匹配",
    "那所以线性查找确实有这个效率上的问题啊",
    "后来发展出来什么二分查找 binary search ",
    "我们在可视化这边也模拟一下二分查找原理",
    "比如说大家看这么一个数列吧",
    "比如说我要寻找 id 是48的这行数据",
    "在这里填上48",
    "让他用这个 binary search ",
    "他先找什么呀",
    "他先找头和尾",
    "我暂停一下",
    "跟头和尾去比较",
    "我这个48比这个头是17要大",
    "比尾960要小",
    "说明在这个数列中间对吧",
    "在里面在前一半还是在后一半呢",
    "找到中间这个15号 id 是261的这个数据",
    "你看他 id 261",
    "跟我想寻找的48相比",
    "它小对吧",
    "那说明48在前面这一段啊",
    "这个17~261之间对吧",
    "在这个里面它是在前一半还是后一半呢",
    "那就是先寻找中间的这个数据",
    "跟中间的数据比较啊",
    "看到吗",
    "找到中间这个 id 是70对吧",
    "48和70比48比70小",
    "说明还在前面这一半对吧",
    "哎，这样的话呢，在前面这一半再取中间的这个点",
    "发现正好就是48",
    "那我们这次的搜索就完成了",
    "所以这个二分查找的时间复杂度应该是多少呢",
    "是 log 前面加个 log 啊",
    "我们就可以断定",
    "在巨大的 N 的情况下",
    "它会被减少的非常少啊",
    "前面加一个 log ",
    "也就是说，随着数据量巨大的剧增",
    "那么它的时间复杂度也不会有特别大的增加",
    "这是二分查找高效率的地方",
    "那二分查找的原理呢",
    "就是拿出数列的中点作为比较对象",
    "比较一下我们要找的这个 id 是在前面一半",
    "那如果在于前面一半的话",
    "还是在后面一半，对吧",
    "我们再把前面一半砍成两半再比较",
    "这样的话呢",
    "就可以每次把我们要找的这个 id 范围减少一半",
    "越来越逼近他真实的这个范围",
    "这是二分查找",
    "但是大家想二分查找有没有什么问题啊",
    "二分查找的问题就在于",
    "我们必须要知道这一段数据的终点在哪里",
    "中间的那个点在哪里",
    "但是在很多实际情况下",
    "我们是不知道的",
    "比如说像磁盘随机读写的情况下",
    "我们这一个表上",
    "比如说有1万个或者100万个 id ",
    "或者100万行数据",
    "这每一个数据其实在磁盘里面",
    "不是连续读写的啊",
    "因为磁盘大家知道很多碎片的",
    "我们不知道啊",
    "中间的那一个究竟在哪啊",
    "所以说这是二分查找的问题所在啊",
    "所以因为这个缺陷呢",
    "后来人们又发展出了什么",
    "也就是我们用的最多的啊",
    "二叉查找树",
    "就是学习的时候用的最多的二叉树",
    "二叉树是一个什么原理呢",
    "我们也通过这个数据可视化看一下",
    "在这里我们找 binary search trace ",
    "点进去之后呢",
    "他没有给你新建这样的二叉树数",
    "它是空白的啊",
    "我们直接在这里插入就行了",
    "大家复习一下",
    "跟着我相当于复习",
    "这是一个数",
    "输了一个六",
    "六放在这了",
    "再输入一个九",
    "九跟六相比",
    "九比六大对吧",
    "再输入一个四啊",
    "就放在右边了",
    "四去跟六相比小",
    "放在左边了对吧",
    "那输入个一呢",
    "也是放在最左边",
    "咱们把它填一下",
    "我们填成了这样一个二叉树啊",
    "那这样二叉树是怎么搜索的呢",
    "是从什么根节点开始搜索对吧",
    "比如说我们要搜索这个十",
    "是啊，我们就要去寻找这个十，这个节点",
    "大家看他的范围了吗",
    "我把它放慢一点",
    "对吧",
    "从六开始找",
    "从六开始啊",
    "发现十比六大对吧",
    "他应该在右边右字数啊",
    "在十代跟九比较",
    "发现还是比九大",
    "应该在九的右子树啊",
    "最后发现在这个地方啊",
    "这是二叉搜索树",
    "二叉树的搜索过程",
    "但是大家想二叉树有没有什么问题啊",
    "这个大家在学习的时候",
    "应应该以前听过",
    "它会有不平衡的问题啊",
    "比如说最右边现在是15了对吧",
    "我给你插入一个16",
    "又放最右边啊",
    "17",
    "右方最右没18",
    "如果啊，我一个一个往下加的话",
    "它是不是都在最右边",
    "它变成了一个什么呀",
    "变成了一个链表",
    "就相当于退化成我们前面讲的线性查找啊",
    "变成了一个链表",
    "相当于一个线性往下查找",
    "还是没有体现出来树这种数据结构的优势",
    "所以我们就可以总结一下二叉查找树它的特点啊",
    "首先它的时间复杂度是 log n ",
    "他使用了经典的这种二叉树的数据结构",
    "从根节点啊开始查找",
    "比如说我要找这个八",
    "它从根节点开始找",
    "如果比根节点大的话啊",
    "在右子树找对吧",
    "再找下面的根节点",
    "如果还大的话",
    "再找右子树",
    "啊",
    "所以这就是为什么",
    "它的时间复杂度",
    "和二分查找是一样的",
    "因为这种竖形的结构",
    "按照大小排列的竖线结构",
    "天然的被根节点啊",
    "分成了左右两个子数",
    "左子树可以认为是前面一半",
    "右子树可以认为是后面一半",
    "它的这个如果是满树的话",
    "如果是完全二叉树的话",
    "他查找的效率跟二分查找是一样的",
    "而且它不存在二分查找找不到终点的问题",
    "它的终点就是这个根节点",
    "它的终点就是这个根节点",
    "但是它有一个问题是什么呢",
    "是它有可能退化为线性查找",
    "因为它的结构不能变化啊",
    "所以如果我们添加的这个数字啊",
    "不是动态的",
    "id 越来越大的时候",
    "越来越大的时候",
    "它会退化成一个链表在下面啊",
    "添加下去成一个列表",
    "就退化成了时间复杂度为 o on 的这个线性查找",
    "所以它也有它的缺陷在这里",
    "这个根据二叉查找树的缺陷呢",
    "我们又进化出来一个叫平衡二叉树啊",
    "叫 a vl tree ",
    "也可以叫 balanced train 啊",
    "这个 a b l tree ",
    "大大家看它这个图形啊",
    "跟二叉树是一样的",
    "因为它本身也是个二叉树",
    "只是一个平衡二叉树而已",
    "那平衡二叉树它的这个特点在什么",
    "它可以通过左旋和右旋的操作平衡",
    "这个数不会让一边特别长",
    "我们在可视化这里看一下这个平衡二叉树",
    "形成这种链表",
    "它是如何做到这个数的平衡呢",
    "比如说我们往里插入",
    "一插进去",
    "二插进去",
    "放慢一点啊",
    "三插进去",
    "他发现怎么样",
    "是不是成了一个链表了",
    "成了链表之后",
    "它会有一个什么旋转的操作",
    "这是左旋的操作",
    "也就是说它不会让它成为一个一直下去的链表",
    "我们把 id 4插进去看一下",
    "把五再插进去",
    "如果这个地方过长了之后",
    "他会进行左旋的操作",
    "这样的话呢，它的速度是非常平衡的",
    "它不会造成退化成链表的情况",
    "好，我们回来啊",
    "总结一下平号差数的特点啊",
    "首先他在查找的时候跟二叉树是一样的啊",
    "我们刚才没有演示",
    "但是你也可以想象出来",
    "查找还是跟二叉树一样",
    "左右子树这样查找",
    "但是在增删改时",
    "它会有这种左旋和右旋的操作",
    "维护数的平衡",
    "具体的它的这个旋转的算法",
    "网上有很多很多资料",
    "AVL 数就是平衡",
    "大家可以去参考",
    "二叉树可以保证不会退化成线性查找",
    "这是 A 、 B 、 L 数的特点",
    "这是优点",
    "4-2"
]