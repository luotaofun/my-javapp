<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luotao.job.mapper.JobCategoryMapper">
<!--
* 副手，完成厨师长的任务
* Mapper作为连接应用层和数据库层的关键组件，充当数据库操作的接口,简化数据库交互过程
* 定义sql语句：mapper中的方法签名和xml的SQL语句一一对应
* 参数映射：java对象或基本类型可以映射为SQL语句中的占位符使得可以通过代码传递对象或参数
* 结果映射：mpper可将查询结果映射为java对象，简单的标量值还是复杂的数据结构都可以通过配置实现

添加配置：
@MapperScan("com.luotao.job.mapper")// 启动类上标识扫描接口所在包
# application.yaml 中配置mpper位置
mybatis.mapper-locations=classpath:/mapper/**/*.xml
-->
    <select id="allJobCategory" resultType="com.luotao.job.domain.JobCategory">
        select * from `job_category`
    </select>
    <!--keyProperty="id" 表示插入操作完成后，新生成的主键将被映射到传入的 JobCategory 对象的 id 属性上。-->
    <insert id="insertJobCategory" parameterType="com.luotao.job.domain.JobCategory" useGeneratedKeys="true" keyProperty="id">
        insert into `job_category`(category_name,category_desc) values (#{category_name},#{category_desc})
    </insert>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from `job_category` where id=#{id}
    </delete>

    <update id="updateByPrimaryKey" parameterType="com.luotao.job.domain.JobCategory" useGeneratedKeys="true" keyProperty="id">
        update `job_category` set category_name=#{category_name},category_desc=#{category_desc}  where id=#{id}
    </update>

</mapper>