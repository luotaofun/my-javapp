<?xml version="1.0" encoding="UTF-8"?>
<!-- MyBatis配置文件约束声明 -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 映射器定义：将XML映射到EmpMapper接口，实现接口方法与SQL的绑定 -->
<mapper namespace="com.luotao.mapper.EmpMapper">

    <!--将重复的sql定义为独立的SQL 片段，<include> 标签用于引用已定义的 SQL 片段，通过 refid 属性指定要引用的片段的 id。-->
    <sql id="allColumns">
        emp_id as 'empId',   <!-- 将数据库字段 emp_id 映射为 Employ 对象的属性 empId -->
        emp_name as 'empName',
        emp_salary as 'empSalary'
    </sql>
    <!-- 查询符合条件的所有员工信息
         id: 对应Mapper接口方法名
         resultType: 返回结果映射的实体类,在 XML 配置中，resultType 必须显式声明
        parameterType：
            MyBatis 会根据方法签名自动推断参数类型,可以省略parameterType。
            如果有多个参数，mybatis会将所有参数封装为一个 Map，键为 @Param 指定的名称，值为参数的实际值，比如parameterType="java.util.Map"，SQL 语句的参数是一个 Map，可以通过 #{abc} 和 ${tableName} 访问 Map 中的值。
            如果是单个参数，参数是基本类型（如 int、String），MyBatis 会直接使用该参数parameterType=基本类型。参数是对象（如 Student），parameterType=Student。
            如果没有使用 @Param 注解，MyBatis 会使用默认的键名（如 param1、param2 等）
             MyBatis 在某些情况下会忽略 parameterType 的错误，只要 SQL 语句中的参数名和方法参数名匹配即可
            -->
    <select id="list" resultType="我是在mybatis配置文件中定义的Employ的别名" >
        <!-- SQL查询字段映射
            实体类映射：MyBatis 通过反射技术将查询结果的列值设置到实体类的字段中（或通过 setter 方法）。
            Map 映射：MyBatis 通过反射技术动态创建 Map 对象，并将查询结果的列名作为键，列值作为值，填充到 Map 中。
             通过as别名实现数据库字段到Java属性的映射,解决字段名与属性名不一致的问题
             别名与Employ属性名的匹配是大小写不敏感的。例如，empsalary 可以匹配 empSalary。
             如果未指定别名，字段名与属性名需要完全一致（包括大小写）。-->
        select
            <include refid="allColumns"></include>, emp_salary * 2 as 'doubleEmpSalary'
        from t_emp
        where
        1=1
        <!--<if> 标签中的 test 表达式中的参数名指的是 方法参数 中通过 @Param 注解指定的参数名-->
        <if test="empName != null and empName != '' ">
            AND (
            emp_name LIKE CONCAT('%', #{empName}, '%')
            )
        </if>
        <if test="minEmpSalary != null ">
            AND (
            emp_salary >= #{minEmpSalary}
            )
        </if>
    </select>

    <!--  已经配置了mapUnderscoreToCamelCase,这样可以不用编写resultMap,mybatis自动将emp_id映射为实体的empId  -->
    <select id="listByResultMap" resultType="我是在mybatis配置文件中定义的Employ的别名">
    <!-- <select id="listByResultMap" resultMap="employResultMap"> -->
        select *, emp_salary * 2 as 'doubleEmpSalary' from t_emp
    </select>
    <!--   描述实体与查询结果的映射规则。这里的命名很规范，可以不使用这个规则，到MyBatis配置文件中配置mapUnderscoreToCamelCase,自动将emp_id映射为实体的empId
        <resultMap id="employResultMap" type="我是在mybatis配置文件中定义的Employ的别名">
            <id column="emp_id" property="empId"/>
            <result column="emp_name" property="empName"/>
            <result column="emp_salary" property="empSalary"/>
            <result column="doubleEmpSalary" property="doubleEmpSalary"/>
        </resultMap>
    -->

    <select id="getEmpByName" resultType="com.luotao.domian.Employ" >
        select
        emp_id as 'empId',
        emp_name as 'empName',
        emp_salary as 'empSalary'
        from
        ${tableName}
        <!--
            #{} 做的是预编译处理（PreparedStatement），可以有效防止 SQL 注入。
            #{abc} 表示从传入的参数中获取名为 abc 的值，并将其作为 PreparedStatement 的参数。
        -->
        where
        emp_name=#{abc}
        <!--
            ${} 做的是字符串拼接，直接将变量值插入到 SQL 语句中。
            ${abc} 会直接将 abc 的值替换到 SQL 语句中，不进行任何转义，存在 SQL 注入风险。
            示例：where emp_name='${abc}'
        -->
    </select>

    <select id="getEmpSalaryById" resultType="double">
        select emp_salary
        from t_emp
        where emp_id = #{empId}
    </select>

    <select id="getMinMaxAvgSalary" resultType="map">
        select
            emp_id,
            min(emp_salary) as 'minSalary',
            max(emp_salary) as 'maxSalary',
            avg(emp_salary) as 'avgSalary'
        from t_emp
    </select>

    <!-- keyProperty 属性用于指定将数据库生成的主键值映射到实体类的哪个属性，key表示数据库的主键，property表示实体类的属性。-->
    <insert id="addEmploy" useGeneratedKeys="true" keyProperty="empId">
        <!--parameterType为实体类型，这些参数其实就是Employ的属性名,通过实体类的 getter 方法获取属性值，并将其映射到 SQL 语句中的 #{} 占位符-->
        insert into t_emp(emp_id,emp_name,emp_salary) values (null,#{empName},#{empSalary})
    </insert>

    <insert id="addEmployByMap">
        <!--parameterType为Map类型，这些参数其实就是map的key,通过map.get("empName")获取value,并将其映射到 SQL 语句中的 #{} 占位符-->
        insert into t_emp(emp_id,emp_name,emp_salary) values (null,#{empName},#{empSalary})
    </insert>
</mapper>
